// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5VuZBYsf9XShsH8JN1E7RG
// Component: M57Gw6oGV1ap4
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: wX8V0L1xhHdJc/component
import Section from "../../Section"; // plasmic-import: qFGWBK_MfVBLaM/component
import FeatureCard from "../../FeatureCard"; // plasmic-import: _ovNmxtbbxZst/component
import Testimonial from "../../Testimonial"; // plasmic-import: HQ-KRKWD-BLbW/component
import HomeCta from "../../HomeCta"; // plasmic-import: a4Y-Hq6o2G_xa/component

import { useScreenVariants as useScreenVariantsnjLjKdr2AGm9F7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: njLjKdr2AGm9f7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_racing_united_2.module.css"; // plasmic-import: 5VuZBYsf9XShsH8JN1E7RG/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: M57Gw6oGV1ap4/css

import LightningIcon from "./icons/PlasmicIcon__Lightning"; // plasmic-import: LmkWQMrksu2EFs/icon
import HammerIcon from "./icons/PlasmicIcon__Hammer"; // plasmic-import: Th2aX5QnRUzhAB/icon
import PencilIcon from "./icons/PlasmicIcon__Pencil"; // plasmic-import: DSYEAN2m7eBeXU/icon
import SwapIcon from "./icons/PlasmicIcon__Swap"; // plasmic-import: GUpGIoV19iKkx7/icon
import SlotIcon from "./icons/PlasmicIcon__Slot"; // plasmic-import: d5cIcRtIxG5B6-/icon
import CycleIcon from "./icons/PlasmicIcon__Cycle"; // plasmic-import: 1gCVEBH8OVcT2B/icon
import FacebookLogoIcon from "./icons/PlasmicIcon__FacebookLogo"; // plasmic-import: O5RZGCGhd8opZc/icon
import TinderLogoIcon from "./icons/PlasmicIcon__TinderLogo"; // plasmic-import: MiSASlHhRRN-RZ/icon
import AirbnbLogoIcon from "./icons/PlasmicIcon__AirbnbLogo"; // plasmic-import: TjeyXFe0m_4rY4/icon
import HubspotLogoIcon from "./icons/PlasmicIcon__HubspotLogo"; // plasmic-import: N6EHhaJlFfE7w2/icon
import AmazonLogoIcon from "./icons/PlasmicIcon__AmazonLogo"; // plasmic-import: YNjWyqG4WX9aG3/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  solutions?: p.Flex<typeof Section>;
  columns?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  howItWorks?: p.Flex<typeof Section>;
  validation?: p.Flex<typeof Section>;
  testimonial?: p.Flex<typeof Testimonial>;
  homeCta?: p.Flex<typeof HomeCta>;
};

export interface DefaultHomeProps {}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnjLjKdr2AGm9F7()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <meta
          key="description"
          property="og:description"
          name="description"
          content={"Global motorsport advisory."}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />
          ) : null}
          {true ? (
            <Section
              data-plasmic-name={"solutions"}
              data-plasmic-override={overrides.solutions}
              className={classNames("__wab_instance", sty.solutions)}
              hasSubtitle={true}
              hasTitle={true}
              subtitle={
                "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
              }
              title={"Explore the solutions"}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column___9Az8)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tOVgZ)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vi0Hu
                      )}
                    >
                      {"Powerful suite of tools"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bceiR
                      )}
                    >
                      {
                        "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa."
                      }
                    </div>

                    <FeatureCard
                      className={classNames(
                        "__wab_instance",
                        sty.featureCard__tWnsB
                      )}
                      description={
                        "Taking collaboration to the next level with security and administrative features built for teams"
                      }
                      iconBack={
                        <LightningIcon
                          className={classNames(projectcss.all, sty.svg__axZ4C)}
                          role={"img"}
                        />
                      }
                      long={true}
                      title={"Building the Simple ecosystem"}
                    />

                    <FeatureCard
                      className={classNames(
                        "__wab_instance",
                        sty.featureCard__c5Aao
                      )}
                      description={
                        "Taking collaboration to the next level with security and administrative features built for teams"
                      }
                      iconBack={
                        <HammerIcon
                          className={classNames(projectcss.all, sty.svg__gZ4U)}
                          role={"img"}
                        />
                      }
                      long={true}
                      title={"Building the Simple Ecosystem"}
                    />

                    <FeatureCard
                      className={classNames(
                        "__wab_instance",
                        sty.featureCard__bqOr6
                      )}
                      description={
                        "Taking collaboration to the next level with security and administrative features built for teams"
                      }
                      iconBack={
                        <PencilIcon
                          className={classNames(projectcss.all, sty.svg__jaDaH)}
                          role={"img"}
                        />
                      }
                      long={true}
                      title={"Building the Simple Ecosystem"}
                    />
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__zJQxs)}>
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    src={{
                      src: "/plasmic/racing_united_2/images/simpleProject.png",
                      fullWidth: 1000,
                      fullHeight: 924,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </p.Stack>
            </Section>
          ) : null}
          {true ? (
            <Section
              data-plasmic-name={"howItWorks"}
              data-plasmic-override={overrides.howItWorks}
              className={classNames("__wab_instance", sty.howItWorks)}
              color={"halfDark" as const}
              hasSubtitle={true}
              hasTitle={true}
              subtitle={
                "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
              }
              title={"How Simple works"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sgV2B)}
              >
                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__lqQp0
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <SwapIcon
                      className={classNames(projectcss.all, sty.svg___3KfX)}
                      role={"img"}
                    />
                  }
                  title={"Initial Contact"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__fKAz
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <SlotIcon
                      className={classNames(projectcss.all, sty.svg___0KRn)}
                      role={"img"}
                    />
                  }
                  title={"Discovery Session"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__sryXq
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <CycleIcon
                      className={classNames(projectcss.all, sty.svg__bzJa0)}
                      role={"img"}
                    />
                  }
                  title={"Contracting"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__nUrEb
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <HammerIcon
                      className={classNames(projectcss.all, sty.svg__fpRwD)}
                      role={"img"}
                    />
                  }
                  title={"Fast Prototyping"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__kbwgn
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <PencilIcon
                      className={classNames(projectcss.all, sty.svg__xOSe)}
                      role={"img"}
                    />
                  }
                  title={"Design Phase"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__bY4Ef
                  )}
                  description={
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                  }
                  iconFront={
                    <LightningIcon
                      className={classNames(projectcss.all, sty.svg__m3Una)}
                      role={"img"}
                    />
                  }
                  title={"Develop & Launch"}
                />
              </p.Stack>

              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__c3TgN)}
                />
              ) : null}
            </Section>
          ) : null}
          {true ? (
            <Section
              data-plasmic-name={"validation"}
              data-plasmic-override={overrides.validation}
              className={classNames("__wab_instance", sty.validation)}
              hasSubtitle={true}
              hasTitle={true}
              subtitle={
                "Arcu cursus vitae congue mauris rhoncus viverra nibh cras pulvinar mattis blandit libero cursus mattis."
              }
              title={"Trusted by over 20,000 companies all over the world"}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rfOta)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__u5IQn)}
                >
                  <FacebookLogoIcon
                    className={classNames(projectcss.all, sty.svg__bmcIb)}
                    role={"img"}
                  />

                  <TinderLogoIcon
                    className={classNames(projectcss.all, sty.svg__pAypD)}
                    role={"img"}
                  />

                  <AirbnbLogoIcon
                    className={classNames(projectcss.all, sty.svg__jiXdP)}
                    role={"img"}
                  />

                  <HubspotLogoIcon
                    className={classNames(projectcss.all, sty.svg__rrIiZ)}
                    role={"img"}
                  />

                  <AmazonLogoIcon
                    className={classNames(projectcss.all, sty.svg__qlwm4)}
                    role={"img"}
                  />
                </p.Stack>

                <Testimonial
                  data-plasmic-name={"testimonial"}
                  data-plasmic-override={overrides.testimonial}
                  className={classNames("__wab_instance", sty.testimonial)}
                />
              </p.Stack>
            </Section>
          ) : null}
          {true ? (
            <HomeCta
              data-plasmic-name={"homeCta"}
              data-plasmic-override={overrides.homeCta}
              className={classNames("__wab_instance", sty.homeCta)}
            />
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iwWlf
            )}
          >
            {"All rights reserved."}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "solutions",
    "columns",
    "img",
    "howItWorks",
    "validation",
    "testimonial",
    "homeCta"
  ],
  header: ["header"],
  solutions: ["solutions", "columns", "img"],
  columns: ["columns", "img"],
  img: ["img"],
  howItWorks: ["howItWorks"],
  validation: ["validation", "testimonial"],
  testimonial: ["testimonial"],
  homeCta: ["homeCta"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  solutions: typeof Section;
  columns: "div";
  img: typeof p.PlasmicImg;
  howItWorks: typeof Section;
  validation: typeof Section;
  testimonial: typeof Testimonial;
  homeCta: typeof HomeCta;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    solutions: makeNodeComponent("solutions"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    howItWorks: makeNodeComponent("howItWorks"),
    validation: makeNodeComponent("validation"),
    testimonial: makeNodeComponent("testimonial"),
    homeCta: makeNodeComponent("homeCta"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
